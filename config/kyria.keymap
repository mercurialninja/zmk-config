/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define NUM_SYM 1
#define NAV     2

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        encmod: encoder_mods {
            compatible = "zmk,behavior-sensor-rotate-key-press";
            label = "encoder mods";
            #sensor-binding-cells = <2>;
            modifier-key = <LWIN>;
            mod-timeout-ms = <650>;
        };
    };
};

/ {
	combos {
		compatible = "zmk,combos";
		combo_q {
			timeout-ms = <50>;
			key-positions = <1 2>;  // Q W
			bindings = <&kp Q>;
        };
	};
};

/ {
	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
    &none &kp Q       &kp W       &kp E       &kp R         &kp T            &kp Y     &kp U      &kp I         &kp O         &kp P             &none
    &none &kp A       &kp S       &kp D       &kp F         &kp G            &kp H     &kp J      &kp K         &kp L         &kp SEMI          &none
    &none &kp Z       &kp X       &kp C       &kp V         &kp B            &kp ESC   &kp NAV
                                              &kp NUM_SYM   &hm BSPC         &kp N     &kp M      &kp COMMA     &kp DOT       &kp FSLH          &none
	                  &kp C_PP    &kp LSHIFT  &kp LWIN      &mo LALT         &kp LCTRL &kp SPACE  &kp RET       &kp TAB       &kp DEL           &kp C_MUTE
			>;

			sensor-bindings = <&encmod LS(TAB) TAB &inc_dec_kp PG_UP PG_DN>;
		};

		num_sym {
			bindings = <
    &none &kp EXCL    &kp AT      &kp HASH     &kp DOLLAR    &kp PRCNT        &kp CARET  &kp AMPS     &kp N7        &kp N8          &kp N9     &none
    &none &kp ASTRK   &kp LPAR    &kp RPAR     &kp LBKT      &kp RBKT         &kp EQUAL  &kp BSLH     &kp N4        &kp N5          &kp N6     &none
    &none &kp SQT     &kp LBRC    &kp RBRC     &kp DQT       &kp GRAVE        &kp ESC    &mo NAV
                                               &trans        &kp BSPC         &kp MINUS  &kp N0       &kp N1        &kp N2          &kp N3     &none
	                  &trans      &trans       &trans        &trans           &trans     &trans       &trans        &trans          &trans     &trans    
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp C_AC_SCROLL_UP C_AC_SCROLL_DOWN>;
		};

		nav {
			bindings = <
    &none &none       &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3     &bt BT_CLR   &rgb_ug RGB_HUI  &rgb_ug RGB_HUD   &rgb_ug RGB_EFF  &bt BT_CLR &none
    &none &none       &none         &none        &kp UP        &none           &none        &kp UP           &out OUT_USB      &out OUT_BLE     &kp EQUAL  &none
    &none &none       &none         &kp LEFT     &kp DOWN      &kp RIGHT       &kp ESC      &trans
                                                 &kp NUM_SYM   &hm BSPC        &kp LEFT     &kp DOWN         &kp RIGHT         &kp BSPC         &kp RET    &none
	                  &trans        &trans       &trans        &trans          &trans       &trans           &trans       &trans                &trans     &rgb_ug RGB_TOG
			>;

			sensor-bindings = <&inc_dec_kp C_BRI_UP C_BRI_DN &inc_dec_kp PG_UP PG_DN>;
		};

	};
};

#if 0
/ {
	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
    &none &kp Q         &kp W         &kp E       &kp R         &kp T            &kp Y      &kp U        &kp I         &kp O         &kp P             &none
    &none &kp A         &kp S         &kp D       &hm F         &kp G            &kp H      &kp J        &kp K         &kp L         &kp SEMI          &none
    &none &kp Z         &kp X         &kp C       &kp V         &kp B            &kp GRAVE  &kp SQT
                                                  &kp EQUAL     &hm MINUS        &kp N      &kp M        &kp COMMA     &kp DOT       &kp FSLH          &none
	                    &kp C_PP      &kp LSHIFT  &kp LWIN      &mo LALT         &kp LCTRL  &kp SPACE    &kp RET       &kp RSHIFT    &kp DEL           &kp C_MUTE
			>;

			sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp C_VOL_DN C_VOL_UP>;
		};

		num_sym {
			bindings = <
    &none &kp EXCL       &kp AT      &kp HASH     &kp DOLLAR    &kp PRCNT        &kp CARET  &kp AMPS     &kp N7        &kp N8          &kp N9     &none
    &none &kp ASTRK      &kp LPAR    &kp RPAR     &kp LBKT      &kp RBKT         &kp EQUAL  &kp BSLH     &kp N4        &kp N5          &kp N6     &none
    &none &kp SQT        &kp LBRC    &kp RBRC     &kp DQT       &kp GRAVE        &kp ESC    &mo NAV
                                                  &trans        &kp BSPC         &kp MINUS  &kp N0       &kp N1        &kp N2          &kp N3     &none
	                     &trans     &trans        &trans        &trans           &trans     &trans       &trans        &trans          &trans     &trans    
			>;

			sensor-bindings = <&encmod LS(TAB) TAB &inc_dec_kp PG_UP PG_DN>;
		};

		nav {
			bindings = <
    &none &none       &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3     &bt BT_CLR   &rgb_ug RGB_HUI  &rgb_ug RGB_HUD   &rgb_ug RGB_EFF  &bt BT_CLR &none
    &none &none       &none         &none        &kp UP        &none           &none        &kp UP           &out OUT_USB      &out OUT_BLE     &kp EQUAL  &none
    &none &none       &none         &kp LEFT     &kp DOWN      &kp RIGHT       &kp ESC      &trans
                                                 &kp NUM_SYM   &hm BSPC        &kp LEFT     &kp DOWN         &kp RIGHT         &kp BSPC         &kp RET    &none
	                  &trans        &trans       &trans        &trans          &trans       &trans           &trans            &trans           &trans     &trans
			>;

			sensor-bindings = <&inc_dec_kp C_BRI_UP C_BRI_DN &inc_dec_kp PG_UP PG_DN>;
		};
	};
};
#endif
